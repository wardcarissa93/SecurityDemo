// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityDemo.Data;

#nullable disable

namespace SecurityDemo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role-id",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "customer-role-id",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "790c132e-58cf-43be-b07d-c8bf81baed00",
                            Email = "admin@home.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOME.COM",
                            NormalizedUserName = "ADMIN@HOME.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGDGHME4/grs3IH1Vf7Zjg4+7rvgQ4VFe+GgcXyGoVsRKFjbrKsTdonJAbVp4AXBig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@home.com"
                        },
                        new
                        {
                            Id = "mateo-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8985444-8b11-4b5f-befc-fa9c099d1001",
                            Email = "mateo@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MATEO@GMAIL.COM",
                            NormalizedUserName = "MATEO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYnKI2G1Cjany2dIa/2G84G7HNwR40/7qsjffbtxyxrjGlSrr6H539P/ZOkUTH+NQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mateo@gmail.com"
                        },
                        new
                        {
                            Id = "priya-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "559f08ac-b2b3-46b7-a8b2-750c609e5d9c",
                            Email = "priya@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PRAYA@YAHOO.COM",
                            NormalizedUserName = "PRAYA@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAVlpymz+Q5n3iTIlylcTH5VxtF4MtvTEUVfr2wKrSHgEQZvaPDP4IbhedTkUtO0lQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "priya@yahoo.com"
                        },
                        new
                        {
                            Id = "keiko-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b12c797d-f041-4030-b9f1-e3ca12a95be3",
                            Email = "keiko@Outlook.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KEIKO@OUTLOOK.COM",
                            NormalizedUserName = "KEIKO@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPPwO/Pr7HdwmFymL93oJaOh/QZXdaF4MgBLFrGd9JVIBKfE7Y0F8cS/pvTEoVagkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "keiko@Outlook.com"
                        },
                        new
                        {
                            Id = "kwame-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5da91da-3ce8-40c7-a8eb-528c331f5140",
                            Email = "kwame@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KWAME@AOL.COM",
                            NormalizedUserName = "KWAME@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED8CRh0Jugv3kdGeHOWqBqaizyzDvyHB15Ju7A7gZ65VhvYTwdEg16EX16Lu7FHC7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "kwame@aol.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-user-id",
                            RoleId = "admin-role-id"
                        },
                        new
                        {
                            UserId = "mateo-user-id",
                            RoleId = "customer-role-id"
                        },
                        new
                        {
                            UserId = "priya-user-id",
                            RoleId = "customer-role-id"
                        },
                        new
                        {
                            UserId = "keiko-user-id",
                            RoleId = "customer-role-id"
                        },
                        new
                        {
                            UserId = "kwame-user-id",
                            RoleId = "customer-role-id"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SecurityDemo.Models.Building", b =>
                {
                    b.Property<int>("buildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("cityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("buildingId");

                    b.HasIndex("cityId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            buildingId = 1,
                            cityId = 1,
                            name = "Building A"
                        },
                        new
                        {
                            buildingId = 2,
                            cityId = 5,
                            name = "Building B"
                        },
                        new
                        {
                            buildingId = 3,
                            cityId = 5,
                            name = "Building C"
                        },
                        new
                        {
                            buildingId = 4,
                            cityId = 1,
                            name = "Building D"
                        },
                        new
                        {
                            buildingId = 5,
                            cityId = 4,
                            name = "Building E"
                        },
                        new
                        {
                            buildingId = 6,
                            cityId = 1,
                            name = "Building F"
                        },
                        new
                        {
                            buildingId = 7,
                            cityId = 4,
                            name = "Building G"
                        },
                        new
                        {
                            buildingId = 8,
                            cityId = 5,
                            name = "Building H"
                        },
                        new
                        {
                            buildingId = 9,
                            cityId = 1,
                            name = "Building I"
                        },
                        new
                        {
                            buildingId = 10,
                            cityId = 4,
                            name = "Building J"
                        });
                });

            modelBuilder.Entity("SecurityDemo.Models.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("cityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("cityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            cityId = 1,
                            cityName = "Vancouver"
                        },
                        new
                        {
                            cityId = 2,
                            cityName = "Toronto"
                        },
                        new
                        {
                            cityId = 3,
                            cityName = "Montreal"
                        },
                        new
                        {
                            cityId = 4,
                            cityName = "Calgary"
                        },
                        new
                        {
                            cityId = 5,
                            cityName = "Surrey"
                        });
                });

            modelBuilder.Entity("SecurityDemo.Models.Room", b =>
                {
                    b.Property<int>("roomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("buildingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("roomId");

                    b.HasIndex("buildingId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            roomId = 1,
                            buildingId = 1,
                            capacity = 22,
                            name = "Room 101"
                        },
                        new
                        {
                            roomId = 2,
                            buildingId = 1,
                            capacity = 35,
                            name = "Room 201"
                        },
                        new
                        {
                            roomId = 3,
                            buildingId = 2,
                            capacity = 15,
                            name = "Room 301"
                        },
                        new
                        {
                            roomId = 4,
                            buildingId = 3,
                            capacity = 55,
                            name = "Room 151"
                        },
                        new
                        {
                            roomId = 5,
                            buildingId = 3,
                            capacity = 55,
                            name = "Room 251"
                        },
                        new
                        {
                            roomId = 6,
                            buildingId = 3,
                            capacity = 25,
                            name = "Room 301"
                        },
                        new
                        {
                            roomId = 7,
                            buildingId = 4,
                            capacity = 12,
                            name = "Room 101"
                        },
                        new
                        {
                            roomId = 8,
                            buildingId = 4,
                            capacity = 75,
                            name = "Room 201"
                        },
                        new
                        {
                            roomId = 9,
                            buildingId = 4,
                            capacity = 8,
                            name = "Room 301"
                        },
                        new
                        {
                            roomId = 10,
                            buildingId = 4,
                            capacity = 21,
                            name = "Room 312"
                        },
                        new
                        {
                            roomId = 11,
                            buildingId = 4,
                            capacity = 35,
                            name = "Room 313"
                        },
                        new
                        {
                            roomId = 12,
                            buildingId = 4,
                            capacity = 77,
                            name = "Room 314"
                        },
                        new
                        {
                            roomId = 13,
                            buildingId = 5,
                            capacity = 75,
                            name = "Room 401"
                        },
                        new
                        {
                            roomId = 14,
                            buildingId = 6,
                            capacity = 30,
                            name = "Room 801"
                        },
                        new
                        {
                            roomId = 15,
                            buildingId = 7,
                            capacity = 28,
                            name = "Room 901"
                        },
                        new
                        {
                            roomId = 16,
                            buildingId = 8,
                            capacity = 55,
                            name = "Room 551"
                        },
                        new
                        {
                            roomId = 17,
                            buildingId = 9,
                            capacity = 30,
                            name = "Room 801"
                        },
                        new
                        {
                            roomId = 18,
                            buildingId = 10,
                            capacity = 25,
                            name = "Room 601"
                        },
                        new
                        {
                            roomId = 19,
                            buildingId = 10,
                            capacity = 21,
                            name = "Room 701"
                        },
                        new
                        {
                            roomId = 20,
                            buildingId = 10,
                            capacity = 30,
                            name = "Room 801"
                        },
                        new
                        {
                            roomId = 21,
                            buildingId = 10,
                            capacity = 20,
                            name = "Room 901"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityDemo.Models.Building", b =>
                {
                    b.HasOne("SecurityDemo.Models.City", "city")
                        .WithMany("buildings")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("SecurityDemo.Models.Room", b =>
                {
                    b.HasOne("SecurityDemo.Models.Building", "building")
                        .WithMany("rooms")
                        .HasForeignKey("buildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("building");
                });

            modelBuilder.Entity("SecurityDemo.Models.Building", b =>
                {
                    b.Navigation("rooms");
                });

            modelBuilder.Entity("SecurityDemo.Models.City", b =>
                {
                    b.Navigation("buildings");
                });
#pragma warning restore 612, 618
        }
    }
}
